from flaskapp import app
import os
import secrets
from PIL import Image
from flask import render_template, url_for, flash, redirect, request, abort, current_app
from flaskapp import app, db, bcrypt, mail
from flaskapp.forms import (RegistrationForm, LoginForm, CreatePostForm)
from flaskapp.models import User, Post
from flask_login import login_user, current_user, logout_user, login_required
from flask_mail import Message

# ////////////////////////////////////////////////////////////////////////////////////////////
# //////////////////////////////// ROUTE FOR HOME PAGE////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////////////////
@app.route('/')
@app.route('/home')
@login_required
def home():
    page = request.args.get('page', 1, type=int)
    posts = Post.query.order_by(Post.date_posted.desc()).paginate(page=page, per_page=3)
    return render_template('home.html', posts=posts)

# ////////////////////////////////////////////////////////////////////////////////////////////
# //////////////////////////////// ROUTE FOR NOTIFICATION PAGE////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////////////////

@app.route('/notifications')
@login_required
def notifications():
    return render_template('notifications.html')

# ////////////////////////////////////////////////////////////////////////////////////////////
# //////////////////////////////// ROUTE FOR INBOX PAGE///////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////////////////

@app.route('/inbox')
@login_required
def inbox():
    return render_template('inbox.html')

# ////////////////////////////////////////////////////////////////////////////////////////////
# //////////////////////////////// ROUTE FOR PROFILE PAGE/////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////////////////

@app.route('/profile')
@login_required
def profile():
    return render_template('profile.html')

# ////////////////////////////////////////////////////////////////////////////////////////////
# //////////////////////////////// ROUTE FOR LOGIN PAGE///////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////////////////

@app.route("/login", methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and bcrypt.check_password_hash(user.password, form.password.data):
            login_user(user)
            return redirect(url_for('home'))
        else:
            pass
    return render_template('login.html', title='Login', form=form)

# ////////////////////////////////////////////////////////////////////////////////////////////
# //////////////////////////////// ROUTE FOR SIGNUP PAGE//////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////////////////

@app.route('/signup', methods=['GET', 'POST'])
def signup():
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    form = RegistrationForm()
    if form.validate_on_submit():
        hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
        user = User(email=form.email.data, full_name=form.full_name.data, username=form.username.data, password=hashed_password)
        db.session.add(user)
        db.session.commit()
        return redirect(url_for('login'))
    return render_template('signup.html', form=form)

# ////////////////////////////////////////////////////////////////////////////////////////////
# //////////////////////////////// ROUTE FOR LOGOUT //////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////////////////

@app.route("/logout")
def logout():
    logout_user()
    return redirect(url_for('login'))

# ////////////////////////////////////////////////////////////////////////////////////////////
# //////////////////////////////// ROUTE FOR CREATE POST PAGE/////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////////////////

@app.route('/create_post', methods=['GET', 'POST'])
@login_required
def create_post():
    form = CreatePostForm()
    if form.validate_on_submit():
        post = Post(caption=form.caption.data, author=current_user)
        db.session.add(post)
        db.session.commit()
        return redirect(url_for('home'))
    return render_template('create_post.html', form=form)

# ////////////////////////////////////////////////////////////////////////////////////////////
# //////////////////////////////// ROUTE FOR POST PAGE////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////////////////

@app.route("/post/<int:post_id>")
def post(post_id):
    post = Post.query.get_or_404(post_id)
    return render_template('post.html', post=post)

# ////////////////////////////////////////////////////////////////////////////////////////////
# //////////////////////////////// ROUTE FOR DELETE POST /////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////////////////

@app.route("/post/<int:post_id>/delete", methods=['POST'])
@login_required
def delete_post(post_id):
    post = Post.query.get_or_404(post_id)
    if post.author != current_user:
        abort(403)
    db.session.delete(post)
    db.session.commit()
    return redirect(url_for('home'))
